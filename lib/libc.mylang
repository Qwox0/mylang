// TODO: these bindings are incomplete

// ===== c interop =====

// x86_64 Linux
pub c_char :: u8;
pub c_int :: i32;
pub c_long :: i64;
pub c_size_t :: u64;
pub c_off64_t :: i64;
pub c_double :: f64;

// ===== <assert.h> =====

// extern assert: (cond: bool) -> void;
// extern __assert: (cond: bool) -> void;

// ===== <complex.h> =====


// ===== <ctype.h> =====


// ===== <errno.h> =====


// ===== <fenv.h> =====


// ===== <float.h> =====


// ===== <inttypes.h> =====


// ===== <iso646.h> =====


// ===== <limits.h> =====


// ===== <locale.h> =====


// ===== <math.h> =====

extern log10: (x: c_double) -> c_double;

// ===== <setjmp.h> =====


// ===== <signal.h> =====


// ===== <stdalign.h> =====


// ===== <stdarg.h> =====


// ===== <stdatomic.h> =====


// ===== <stdbit.h> =====


// ===== <stdbool.h> =====


// ===== <stdckdint.h> =====


// ===== <stddef.h> =====


// ===== <stdint.h> =====


// ===== <stdio.h> =====

pub FILE :: struct { /* empty */ };

// stdin : *FILE : 0;
// stdout : *FILE : 1;
// stderr : *FILE : 2;

extern stdin: *FILE;
extern stdout: *FILE;
extern stderr: *FILE;

// HACK: use params with default values instead of varargs.

extern printf: (                                fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int;
extern fprintf: (stream: *FILE,                 fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int;
extern dprintf: (fd: c_int,                     fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int;
extern sprintf: (str: *c_char,                  fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int;
extern snprintf: (str: *c_char, size: c_size_t, fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int;
extern asprintf: (out_str: *mut *c_char,        fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int;

/// writes a character to stdout
//extern putchar: (ch: c_int) -> c_int;
extern putchar: (ch: u8) -> c_int;

/// writes a character string to stdout
extern puts: (str: *u8) -> c_int;

extern EOF: c_int;

extern fopen: (pathname: *c_char, mode: *u8) -> ?*FILE;
extern fopen64: (pathname: *c_char, mode: *u8) -> ?*FILE;
/// 0 == success; EOF == error
extern fclose: (stream: *FILE) -> c_int;
extern fcloseall: (stream: *FILE) -> c_int;
extern ftell: (stream: *FILE) -> c_long;
extern fseek: (stream: *FILE, offset: c_long, whence: c_int) -> c_int;

/*
extern SEEK_SET: c_int;
extern SEEK_CUR: c_int;
extern SEEK_END: c_int;
*/
// see <https://github.com/bminor/glibc/blob/3374de90386f1814cec58567248d43a4632b16f0/libio/stdio.h#L110-L112>
pub SEEK_SET : c_int : 0;
pub SEEK_CUR : c_int : 1;
pub SEEK_END : c_int : 2;

extern fread: (data: *void, size: c_size_t, count: c_size_t, stream: *FILE) -> c_size_t;

// ===== <stdlib.h> =====

extern malloc: (size: c_size_t) -> ?*void;
extern free: (ptr: *void) -> void;

extern exit: (status: c_int) -> never;

extern strtol: (string: *c_char, tailptr: **c_char, base: c_int) -> c_long;
extern atoi: (string: *c_char) -> c_int;
extern atol: (string: *c_char) -> c_long;

/// <https://www.gnu.org/software/libc/manual/html_node/Array-Sort-Function.html>
extern qsort: (array: *void, count: c_size_t, size: c_size_t, compare: *(l: *void, r: *void) -> c_int) -> void;

// ===== <stdnoreturn.h> =====


// ===== <string.h> =====

extern strlen: (str: *c_char) -> c_size_t;

extern memcpy: (dest: *void, src: *void, len: c_size_t) -> *void;
extern memset: (ptr: *void, byte: u8, len: c_size_t) -> *void;

// ===== <tgmath.h> =====


// ===== <threads.h> =====


// ===== <time.h> =====


// ===== <uchar.h> =====


// ===== <wchar.h> =====


// ===== <wctype.h> =====

