// TODO: these bindings are incomplete

// ===== c interop =====

// x86_64 Linux
pub c_char :: u8;
pub c_int :: i32;
pub c_long :: i64;
pub c_size_t :: u64;
pub c_off64_t :: i64;
pub c_double :: f64;

// ===== <assert.h> =====

// assert : (cond: bool) -> void : #extern;
// __assert : (cond: bool) -> void : #extern;

// ===== <complex.h> =====


// ===== <ctype.h> =====


// ===== <errno.h> =====


// ===== <fenv.h> =====


// ===== <float.h> =====


// ===== <inttypes.h> =====


// ===== <iso646.h> =====


// ===== <limits.h> =====


// ===== <locale.h> =====


// ===== <math.h> =====

log10 : (x: c_double) -> c_double : #extern;

// ===== <setjmp.h> =====


// ===== <signal.h> =====


// ===== <stdalign.h> =====


// ===== <stdarg.h> =====


// ===== <stdatomic.h> =====


// ===== <stdbit.h> =====


// ===== <stdbool.h> =====


// ===== <stdckdint.h> =====


// ===== <stddef.h> =====


// ===== <stdint.h> =====


// ===== <stdio.h> =====

pub FILE :: struct { /* empty */ };

static stdin : *FILE = #extern;
static stdout : *FILE = #extern;
static stderr : *FILE = #extern;

// HACK: use params with default values instead of varargs.

printf : (                                fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int : #extern;
fprintf : (stream: *FILE,                 fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int : #extern;
dprintf : (fd: c_int,                     fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int : #extern;
sprintf : (str: *c_char,                  fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int : #extern;
snprintf : (str: *c_char, size: c_size_t, fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int : #extern;
asprintf : (out_str: *mut ?*c_char,       fmt: *c_char, a := 0, b := 0, c := 0, d := 0, e := 0) -> c_int : #extern;

/// writes a character to stdout
//putchar : (ch: c_int) -> c_int : #extern;
putchar : (ch: u8) -> c_int : #extern;

/// writes a character string to stdout
puts : (str: *u8) -> c_int : #extern;

static EOF : c_int = #extern;

fopen : (pathname: *c_char, mode: *u8) -> ?*FILE : #extern;
fopen64 : (pathname: *c_char, mode: *u8) -> ?*FILE : #extern;
/// 0 == success; EOF == error
fclose : (stream: *FILE) -> c_int : #extern;
fcloseall : (stream: *FILE) -> c_int : #extern;
ftell : (stream: *FILE) -> c_long : #extern;
fseek : (stream: *FILE, offset: c_long, whence: c_int) -> c_int : #extern;

// see <https://github.com/bminor/glibc/blob/3374de90386f1814cec58567248d43a4632b16f0/libio/stdio.h#L110-L112>
pub SEEK_SET : c_int : 0;
pub SEEK_CUR : c_int : 1;
pub SEEK_END : c_int : 2;

fread : (data: *any, size: c_size_t, count: c_size_t, stream: *FILE) -> c_size_t : #extern;

// ===== <stdlib.h> =====

malloc : (size: c_size_t) -> ?*any : #extern;
free : (ptr: *any) -> void : #extern;
calloc : (count: c_size_t, size: c_size_t) -> ?*any : #extern;
realloc : (ptr: ?*any, new_size: c_size_t) -> ?*any : #extern;
reallocarray : (ptr: ?*any, new_count: c_size_t, new_size: c_size_t) -> ?*any : #extern;

exit : (status: c_int) -> never : #extern;

strtol : (string: *c_char, tailptr: **c_char, base: c_int) -> c_long : #extern;
atoi : (string: *c_char) -> c_int : #extern;
atol : (string: *c_char) -> c_long : #extern;

/// <https://www.gnu.org/software/libc/manual/html_node/Array-Sort-Function.html>
qsort : (array: *any, count: c_size_t, size: c_size_t, compare: *(l: *any, r: *any) -> c_int) -> void : #extern;

// ===== <stdnoreturn.h> =====


// ===== <string.h> =====

memcpy : (dest: *any, src: *any, len: c_size_t) -> *any : #extern;
memset : (ptr: *any, byte: u8, len: c_size_t) -> *any : #extern;

strlen : (str: *c_char) -> c_size_t : #extern;

strcmp : (s1: *c_char, s2: *c_char) -> c_int : #extern;
strncmp : (s1: *c_char, s2: *c_char, len: c_size_t) -> c_int : #extern;

// ===== <tgmath.h> =====


// ===== <threads.h> =====


// ===== <time.h> =====


// ===== <uchar.h> =====


// ===== <wchar.h> =====


// ===== <wctype.h> =====

