// ----- libc -----

// x86_64 Linux
c_char :: u8;
c_int :: i32;
c_long :: i64;
c_size_t :: u64;
c_off64_t :: i64;

/// writes a character to stdout
extern putchar: (ch: c_int) -> c_int;

/// writes a character string to stdout
extern puts: (str: *u8) -> c_int;

extern malloc: (size: c_size_t) -> ?*void;
extern free: (ptr: *void) -> void;

FILE :: struct { /* ? */ };

/*
stdin : *FILE : 0;
stdout : *FILE : 1;
stderr : *FILE : 2;
*/

extern EOF: c_int;

extern fopen: (pathname: *c_char, mode: *u8) -> ?*FILE;
extern fopen64: (pathname: *c_char, mode: *u8) -> ?*FILE;
/// 0 == success; EOF == error
extern fclose: (stream: *FILE) -> c_int;
extern fcloseall: (stream: *FILE) -> c_int;
extern ftell: (stream: *FILE) -> c_long;
extern fseek: (stream: *FILE, offset: c_long, whence: c_int) -> c_int;
/*
extern SEEK_SET: c_int;
extern SEEK_CUR: c_int;
extern SEEK_END: c_int;
*/
// see <https://github.com/bminor/glibc/blob/3374de90386f1814cec58567248d43a4632b16f0/libio/stdio.h#L110-L112>
SEEK_SET : c_int : 0;
SEEK_CUR : c_int : 1;
SEEK_END : c_int : 2;
extern fread: (data: *void, size: c_size_t, count: c_size_t, stream: *FILE) -> c_size_t;

extern exit: (status: c_int) -> never;

extern strtol: (string: *c_char, tailptr: **c_char, base: c_int) -> c_long;

/// currently only works for one int (use %l in `fmt`)
extern printf: (fmt: *c_char, x: c_long) -> c_int;

/// <https://www.gnu.org/software/libc/manual/html_node/Array-Sort-Function.html>
extern qsort: (array: *void, count: c_size_t, size: c_size_t, compare: *(l: *void, r: *void) -> c_int) -> void;

// ----- my own stuff -----

open_file :: (pathname: []u8, mode: []u8) -> ?*FILE {
    // currently all string slices are 0 terminated, so this should be fine.
    fopen(pathname.ptr, mode.ptr)
}

read_file_as_string_slice :: (pathname: []u8) -> []u8 {
    file := open_file(pathname, "rb");
    if file == nil return "";
    defer fclose(file);

    fseek(file, 0, SEEK_END);
    length := ftell(file);
    if length < 0 return "";
    fseek(file, 0, SEEK_SET);

    buffer := malloc(length + 1);
    if buffer == nil return "";

    fread(buffer, 1, length, file);

    mut slice := []u8.{ ptr = buffer, len = length + 1 };
    slice[length] = 0;
    slice
}
